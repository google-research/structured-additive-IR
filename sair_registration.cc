// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "sair_registration.h"

#include "llvm/ADT/StringRef.h"
#include "mlir/IR/Dialect.h"
#include "mlir/Pass/Pass.h"
#include "mlir/Pass/PassOptions.h"
#include "mlir/Pass/PassRegistry.h"
#include "mlir/Support/LogicalResult.h"
#include "sair_dialect.h"
#include "transforms/default_lowering_attributes.h"
#include "transforms/lowering.h"
#include "transforms/sair_from_linalg.h"

namespace {
// Include pass registrations generated by MLIR. These file should not be
// included anywhere else with GEN_PASS_REGISTRATION set. The #define in front
// selects the part of the file to include (pass base class declaration or pass
// registration). See
// https://mlir.llvm.org/docs/PassManagement/#declarative-pass-specification for
// more information.
#define GEN_PASS_REGISTRATION
#include "transforms/lowering.h.inc"
#define GEN_PASS_REGISTRATION
#include "transforms/sair_from_linalg.h.inc"
#define GEN_PASS_REGISTRATION
#include "transforms/default_lowering_attributes.h.inc"
}

void sair::RegisterSairPasses() {
  registerDefaultLoweringAttributesPasses();
  registerLoweringPasses();
  registerSAIRFromLinalgPasses();

  mlir::registerPassPipeline(
      "convert-sair-to-loop", "converts Sair operations to Loop dialect",
      [](mlir::OpPassManager &pm, llvm::StringRef options) {
        if (!options.empty()) return mlir::failure();
        sair::CreateSairToLoopConversionPipeline(&pm);
        return mlir::success();
      },
      [](llvm::function_ref<void(const mlir::detail::PassOptions &)>) {});

  mlir::registerPassPipeline(
      "convert-sair-to-llvm", "converts Sair operations to LLVM",
      [](mlir::OpPassManager &pm, llvm::StringRef options) {
        if (!options.empty()) return mlir::failure();
        sair::CreateSairToLLVMConversionPipeline(&pm);
        return mlir::success();
      },
      [](llvm::function_ref<void(const mlir::detail::PassOptions &)>) {});
}

void sair::RegisterSairDialect(mlir::DialectRegistry &registry) {
  registry.insert<sair::SairDialect>();
}
